//--------------------------------------------------------------------------------------------------------------
/*
 *  Los distintos alfabetos vienen a ser como el tipo de letra
 */
 enum ABC{Alpha0 = 0, Alpha1, Alpha2, Alpha3}; //los tipos de letra

//------------------------------------------------------------------------------------------------------------
//Este es sacado de :  https://www.ccsinfo.com/forum/viewtopic.php?t=18668&start=0&postdays=0&postorder=asc&highlight=
// Complete 5X7 ASCII Table for a scrooling LED Matrix display ( CCS Forum Index -> General CCS C Discussion )
//Abecedario:
const byte Alphabet0[][9] PROGMEM = {    //Abecedario estandar para estas condicciones: ... top to bottom, ... LSB right 
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53},   // 0x20, Space  //Dejando el espacio con tres columnas
   {0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x22},   // 0x21, !   22
   //{0, 0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x22, "   40 //Estaba buena, pero el cierre de comillas, habria q poner el abre comillas entonces, mas saber si se abre o cierra, etc
   {0, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x30},   // 0x22, " 
   {0, 0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a, 0x40},   // 0x23, #   40
   {0, 0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04, 0x40},   // 0x24, $   40
   {0, 0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x40},   // 0x25, %   40
   {0, 0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x40},   // 0x26, &   40
   //{0, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x32},   // 0x27, '   32
   {0, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x22},   // 0x27, '  //lo mismo q con la comilla doble
   {0, 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x31},   // 0x28, (   31
   {0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x31},   // 0x29, )   31
   {0, 0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x40},   // 0x2a, *   40
   {0, 0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00, 0x40},   // 0x2b, +   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x32},   // 0x2c, ,   32
   {0, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x40},   // 0x2d, -   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x32},   // 0x2e, .   32
   {0, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x40},   // 0x2f, /   40
   {0, 0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e, 0x40},   // 0x30, 0   40
   {0, 0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x31},   // 0x31, 1   31
   {0, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f, 0x40},   // 0x32, 2   40
   {0, 0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e, 0x40},   // 0x33, 3   40
   {0, 0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02, 0x40},   // 0x34, 4   40
   {0, 0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e, 0x40},   // 0x35, 5   40
   {0, 0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e, 0x40},   // 0x36, 6   40
   {0, 0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x40},   // 0x37, 7   40
   {0, 0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e, 0x40},   // 0x38, 8   40
   {0, 0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c, 0x40},   // 0x39, 9   40
   {0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x32},   // 0x3a, :   32
   {0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x32},   // 0x3b, ;   32
   {0, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x41},   // 0x3c, <   41
   {0, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x40},   // 0x3d, =   40
   {0, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x30},   // 0x3e, >   30
   {0, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x40},   // 0x3f, ?   40
   {0, 0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x40},   // 0x40, @   40
   {0, 0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x40},   // 0x41, A   40
   {0, 0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e, 0x40},   // 0x42, B   40
   {0, 0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e, 0x40},   // 0x43, C   40
   {0, 0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e, 0x40},   // 0x44, D   40
   {0, 0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f, 0x40},   // 0x45, E   40
   {0, 0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x40},   // 0x46, F   40
   {0, 0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f, 0x40},   // 0x47, G   40
   {0, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0x40},   // 0x48, H   40
   {0, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x31},   // 0x49, I   31   //fixed width v1.1c
   {0, 0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c, 0x40},   // 0x4a, J   40
   {0, 0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x40},   // 0x4b, K   40
   {0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x40},   // 0x4c, L   40
   {0, 0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11, 0x40},   // 0x4d, M   40
   {0, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x40},   // 0x4e, N   40
   {0, 0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x40},   // 0x4f, O   40
   {0, 0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10, 0x40},   // 0x50, P   40
   {0, 0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d, 0x40},   // 0x51, Q   40
   {0, 0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11, 0x40},   // 0x52, R   40
   {0, 0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e, 0x40},   // 0x53, S   40
   {0, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x40},   // 0x54, T   40
   {0, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x40},   // 0x55, U   40
   {0, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x40},   // 0x56, V   40
   {0, 0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11, 0x40},   // 0x57, W   40
   {0, 0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11, 0x40},   // 0x58, X   40
   {0, 0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04, 0x40},   // 0x59, Y   40
   {0, 0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f, 0x40},   // 0x5a, Z   40
   {0, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x31},   // 0x5b, [   31
   {0, 0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x40},   // 0x5c, '\'   40
   {0, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x31},   // 0x5d, ]   31
   {0, 0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x5e, ^   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x40},   // 0x5f, _   40
   {0, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x21},   // 0x60, `   21
   {0, 0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d, 0x40},   // 0x61, a   40
   {0, 0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c, 0x41},   // 0x62, b   41
   {0, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e, 0x41},   // 0x63, c   41
   {0, 0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07, 0x30},   // 0x64, d   30   //modificada
   {0, 0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f, 0x40},   // 0x65, e   40   //modificada
   {0, 0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08, 0x40},   // 0x66, f   40
   {0, 0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e, 0x40},   // 0x67, g   40
   {0, 0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x40},   // 0x68, h   40
   {0, 0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e, 0x31},   // 0x69, i   31
   {0, 0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c, 0x41},   // 0x6a, j   41
   {0, 0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12, 0x41},   // 0x6b, k   41
   {0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x07, 0x21},   // 0x6c, l   21 
   {0, 0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11, 0x40},   // 0x6d, m   40
   {0, 0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x40},   // 0x6e, n   40
   {0, 0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e, 0x40},   // 0x6f, o   40
   {0, 0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10, 0x41},   // 0x70, p   41
   {0, 0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01, 0x30},   // 0x71, q   30
   {0, 0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x40},   // 0x72, r   40
   {0, 0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e, 0x40},   // 0x73, s   40
   {0, 0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06, 0x40},   // 0x74, t   40
   {0, 0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0x40},   // 0x75, u   40
   {0, 0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x40},   // 0x76, v   40
   {0, 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a, 0x40},   // 0x77, w   40
   {0, 0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x40},   // 0x78, x   40
   {0, 0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e, 0x40},   // 0x79, y   40
   {0, 0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f, 0x40},   // 0x7a, z   40
   {0, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x41},   // 0x7b, {   41
   {0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x33},   // 0x7c, |   33 //modificado
   {0, 0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x30},   // 0x7d, }   30
   {0, 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x7e, ~
   {0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x40},    // 0x7f, DEL 
   {0x00, 0x0e, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x40},   // 'ñ'  //incorporadas aqui en v1.6
   {0x01, 0x02, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d, 0x40},   // 'á'
   {0x02, 0x04, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f, 0x40},   // 'é'
   {0x00, 0x02, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e, 0x31},  // 'í'
   {0x02, 0x04, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e, 0x40},  // 'ó'
   {0x02, 0x04, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0x40},  // 'ú'
   {0, 0x11, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0x40},     // 'ü'
};
//------------------------------------------------------------------------------------------------------------
//Alfabeto:
//Este sacado de https://gullivigne.org/led-matrix-editor/ , Set no.1
//En esta primera aproximacion solo se cambiaran las letras y los numeros con respecto a "abecedario"
//Sera añadido un elemento para cada letra que nos dira desde que col empieza y donde termina la letra
const byte Alphabet1[][9] PROGMEM = {    //Abecedario estandar para estas condicciones: ... top to bottom, ... LSB right 
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53},   // 0x20, Space  //Dejando el espacio con tres columnas
   {0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x22},   // 0x21, !   22
   //{0, 0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x22, "   40
   {0, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x30},   // 0x22, "  
   {0, 0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a, 0x40},   // 0x23, #   40
   {0, 0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04, 0x40},   // 0x24, $   40
   {0, 0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x40},   // 0x25, %   40
   {0, 0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x40},   // 0x26, &   40
   //{0, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x32},   // 0x27, '   32
   {0, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x22},   // 0x27, '  //lo mismo q con la comilla doble
   {0, 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x31},   // 0x28, (   31
   {0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x31},   // 0x29, )   31
   {0, 0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x40},   // 0x2a, *   40
   {0, 0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00, 0x40},   // 0x2b, +   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x32},   // 0x2c, ,   32
   {0, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x40},   // 0x2d, -   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x32},   // 0x2e, .   32
   {0, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x40},   // 0x2f, /   40
   {0, B00111100, B01100110, B01101110, B01110110, B01100110, B01100110, B00111100, 0x61},   // 0x30, 0   
   {0, B00011000, B00011000, B00111000, B00011000, B00011000, B00011000, B01111110, 0x61},   // 0x31, 1   
   {0, B00111100, B01100110, B00000110, B00001100, B00110000, B01100000, B01111110, 0x61},   // 0x32, 2   
   {0, B00111100, B01100110, B00000110, B00011100, B00000110, B01100110, B00111100, 0x61},   // 0x33, 3  
   {0, B00001100, B00011100, B00101100, B01001100, B01111110, B00001100, B00001100, 0x61},   // 0x34, 4   
   {0, B01111110, B01100000, B01111100, B00000110, B00000110, B01100110, B00111100, 0x61},   // 0x35, 5   
   {0, B00111100, B01100110, B01100000, B01111100, B01100110, B01100110, B00111100, 0x61},   // 0x36, 6   
   {0, B01111110, B01100110, B00001100, B00001100, B00011000, B00011000, B00011000, 0x61},   // 0x37, 7  
   {0, B00111100, B01100110, B01100110, B00111100, B01100110, B01100110, B00111100, 0x61},   // 0x38, 8  
   {0, B00111100, B01100110, B01100110, B00111110, B00000110, B01100110, B00111100, 0x61},   // 0x39, 9   
   {0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x32},   // 0x3a, :   32
   {0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x32},   // 0x3b, ;   32
   {0, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x41},   // 0x3c, <   41
   {0, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x40},   // 0x3d, =   40
   {0, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x30},   // 0x3e, >   30
   {0, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x40},   // 0x3f, ?   40
   {0, 0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x40},   // 0x40, @ 
   {0, B00111100, B01100110, B01100110, B01111110, B01100110, B01100110, B01100110, 0x61},   // 0x41, A  //ultimo byte nos dice donde empieza(1er nibble) y donde termina(2do nibble)
   {0, B01111100, B01100110, B01100110, B01111100, B01100110, B01100110, B01111100, 0x61},   // 0x42, B
   {0, B00111100, B01100110, B01100000, B01100000, B01100000, B01100110, B00111100, 0x61},   // 0x43, C
   {0, B01111100, B01100110, B01100110, B01100110, B01100110, B01100110, B01111100, 0x61},   // 0x44, D
   {0, B01111110, B01100000, B01100000, B01111100, B01100000, B01100000, B01111110, 0x61},   // 0x45, E
   {0, B01111110, B01100000, B01100000, B01111100, B01100000, B01100000, B01100000, 0x61},   // 0x46, F
   {0, B00111100, B01100110, B01100000, B01100000, B01101110, B01100110, B00111100, 0x61},   // 0x47, G
   {0, B01100110, B01100110, B01100110, B01111110, B01100110, B01100110, B01100110, 0x61},   // 0x48, H
   {0, B00111100, B00011000, B00011000, B00011000, B00011000, B00011000, B00111100, 0x52},   // 0x49, I  //fixed width in v1.1c
   {0, B00011110, B00001100, B00001100, B00001100, B01101100, B01101100, B00111000, 0x61},   // 0x4a, J
   {0, B01100110, B01101100, B01111000, B01110000, B01111000, B01101100, B01100110, 0x61},   // 0x4b, K
   {0, B01100000, B01100000, B01100000, B01100000, B01100000, B01100000, B01111110, 0x61},   // 0x4c, L
   {0, B01100011, B01110111, B01111111, B01101011, B01100011, B01100011, B01100011, 0x60},   // 0x4d, M
   {0, B01100011, B01110011, B01111011, B01101111, B01100111, B01100011, B01100011, 0x60},   // 0x4e, N
   {0, B00111100, B01100110, B01100110, B01100110, B01100110, B01100110, B00111100, 0x61},   // 0x4f, O
   {0, B01111100, B01100110, B01100110, B01100110, B01111100, B01100000, B01100000, 0x61},   // 0x50, P
   {0, B00111100, B01100110, B01100110, B01100110, B01101110, B00111100, B00000110, 0x61},   // 0x51, Q
   {0, B01111100, B01100110, B01100110, B01111100, B01111000, B01101100, B01100110, 0x61},   // 0x52, R
   {0, B00111100, B01100110, B01100000, B00111100, B00000110, B01100110, B00111100, 0x61},   // 0x53, S
   {0, B01111110, B01011010, B00011000, B00011000, B00011000, B00011000, B00011000, 0x61},   // 0x54, T
   {0, B01100110, B01100110, B01100110, B01100110, B01100110, B01100110, B00111110, 0x61},   // 0x55, U
   {0, B01100110, B01100110, B01100110, B01100110, B01100110, B00111100, B00011000, 0x61},   // 0x56, V
   {0, B01100011, B01100011, B01100011, B01101011, B01111111, B01110111, B01100011, 0x60},   // 0x57, W
   {0, B01100011, B01100011, B00110110, B00011100, B00110110, B01100011, B01100011, 0x60},   // 0x58, X
   {0, B01100110, B01100110, B01100110, B00111100, B00011000, B00011000, B00011000, 0x61},   // 0x59, Y
   {0, B01111110, B00000110, B00001100, B00011000, B00110000, B01100000, B01111110, 0x61},   // 0x5a, Z
   {0, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x31},   // 0x5b, [   31
   {0, 0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x40},   // 0x5c, '\'   40
   {0, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x31},   // 0x5d, ]   31
   {0, 0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x5e, ^   40
   {0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x40},   // 0x5f, _   40
   {0, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x21},   // 0x60, `   21
   {0, B00000000, B00000000, B00111100, B00000110, B00111110, B01100110, B00111110, 0x61},   // 0x61, a
   {0, B01100000, B01100000, B01100000, B01111100, B01100110, B01100110, B01111100, 0x61},   // 0x62, b
   {0, B00000000, B00000000, B00111100, B01100110, B01100000, B01100110, B00111100, 0x61},   // 0x63, c
   {0, B00000110, B00000110, B00000110, B00111110, B01100110, B01100110, B00111110, 0x61},   // 0x64, d
   {0, B00000000, B00000000, B00111100, B01100110, B01111110, B01100000, B00111100, 0x61},   // 0x65, e
   {0, B00011100, B00110110, B00110000, B00110000, B01111100, B00110000, B00110000, 0x61},   // 0x66, f
   {0, B00000000, B00111110, B01100110, B01100110, B00111110, B00000110, B00111100, 0x61},   // 0x67, g
   {0, B01100000, B01100000, B01100000, B01111100, B01100110, B01100110, B01100110, 0x61},   // 0x68, h
   {0, B00000000, B00011000, B00000000, B00011000, B00011000, B00011000, B00111100, 0x52},   // 0x69, i
   {0, B00001100, B00000000, B00001100, B00001100, B01101100, B01101100, B00111000, 0x62},   // 0x6a, j
   {0, B01100000, B01100000, B01100110, B01101100, B01111000, B01101100, B01100110, 0x61},   // 0x6b, k
   {0, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, 0x43},   // 0x6c, l
   {0, B00000000, B00000000, B01100011, B01110111, B01111111, B01101011, B01101011, 0x60},   // 0x6d, m
   {0, B00000000, B00000000, B01111100, B01111110, B01100110, B01100110, B01100110, 0x61},   // 0x6e, n
   {0, B00000000, B00000000, B00111100, B01100110, B01100110, B01100110, B00111100, 0x61},   // 0x6f, o
   {0, B00000000, B01111100, B01100110, B01100110, B01111100, B01100000, B01100000, 0x61},   // 0x70, p
   {0, B00000000, B00111100, B01101100, B01101100, B00111100, B00001100, B00011110, 0x61},   // 0x71, q  //esta modificada de la original de la pag web
   {0, B00000000, B00000000, B01111100, B01100110, B01100110, B01100000, B01100000, 0x61},   // 0x72, r
   {0, B00000000, B00000000, B00111110, B01000000, B00111100, B00000010, B01111100, 0x61},   // 0x73, s
   {0, B00000000, B00011000, B00011000, B01111110, B00011000, B00011000, B00011000, 0x61},   // 0x74, t
   {0, B00000000, B00000000, B01100110, B01100110, B01100110, B01100110, B00111110, 0x61},   // 0x75, u
   {0, B00000000, B00000000, B01100110, B01100110, B01100110, B00111100, B00011000, 0x61},   // 0x76, v  //esta modificada de la original de la pag web
   {0, B00000000, B00000000, B01100011, B01101011, B01101011, B01101011, B00111110, 0x60},   // 0x77, w
   {0, B00000000, B00000000, B01100110, B00111100, B00011000, B00111100, B01100110, 0x61},   // 0x78, x
   {0, B00000000, B00000000, B01100110, B01100110, B00111110, B00000110, B00111100, 0x61},   // 0x79, y
   {0, B00000000, B00000000, B00111100, B00001100, B00011000, B00110000, B00111100, 0x61},   // 0x7a, z
   {0, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x41},   // 0x7b, {   41
   {0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x33},   // 0x7c, |   33 //modificado
   {0, 0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x30},   // 0x7d, }   30
   {0, 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x7e, ~
   {0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x40},    // 0x7f, DEL
   {0, B00111100, B00000000, B01111100, B01111110, B01100110, B01100110, B01100110, 0x61},   // 'ñ'  //incorporadas aqui en v1.6
   {B00001100, B00011000, 0x00, B00111100, B00000110, B00111110, B01100110, B00111110, 0x61},  // 'á'
   {B00001100, B00011000, 0x00, B00111100, B01100110, B01111110, B01100000, B00111100, 0x61},   // 'é'
   {0, B00001100, B00011000, B00000000, B00011000, B00011000, B00011000, B00111100, 0x52},   // 'í'
   {B00001100, B00011000, 0x00, B00111100, B01100110, B01100110, B01100110, B00111100, 0x61},   // 'ó'
   {B00001100, B00011000, 0x00, B01100110, B01100110, B01100110, B01100110, B00111110, 0x61},   // 'ú'
   {0, B01100110, B00000000, B01100110, B01100110, B01100110, B01100110, B00111110, 0x61}   // 'ü'
};

//------------------------------------------------------------------------------------------------------------
//Alfabeto:
//Este sacado de https://gullivigne.org/led-matrix-editor/ , Set no.2
//En esta primera aproximacion solo se cambiaran las letras y los numeros con respecto a "abecedario"
//Sera añadido un elemento para cada letra que nos dira desde que col empieza y donde termina la letra
//Este ahora con 8 lineas, aunque ninguna letra pasa de 7 lineas,, nos dara el nivel, asi la p,q,g podran tener la colita abajo por asi decirlo y la barriga al mismo nivel de la a, etc
const byte Alphabet2[][9] PROGMEM = {    //Abecedario estandar para estas condicciones: ... top to bottom, ... LSB right 
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53},   // 0x20, Space  //Dejando el espacio con tres columnas
   {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x22},   // 0x21, !   22
   //{0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x22, "   40
   {0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30},   // 0x22, "
   {0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a, 0x00, 0x40},   // 0x23, #   40
   {0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04, 0x00, 0x40},   // 0x24, $   40
   {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x00, 0x40},   // 0x25, %   40
   {0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x00, 0x40},   // 0x26, &   40
   //{0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32},   // 0x27, '   32
   {0, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x22},   // 0x27, '  //lo mismo q con la comilla doble
   {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x31},   // 0x28, (   31
   {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00, 0x31},   // 0x29, )   31
   {0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x00, 0x40},   // 0x2a, *   40
   {0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00, 0x00, 0x40},   // 0x2b, +   40
   {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x00, 0x32},   // 0x2c, ,   32
   {0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x2d, -   40
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x32},   // 0x2e, .   32
   {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00, 0x40},   // 0x2f, /   40
   {B01111100, B11000110, B11001110, B11011110, B11110110, B11100110, B01111100, B00000000, 0x71},   // 0x30, 0   
   {B00110000, B01110000, B00110000, B00110000, B00110000, B00110000, B11111100, B00000000, 0x72},   // 0x31, 1   
   {B01111000, B11001100, B00001100, B00111000, B01100000, B11001100, B11111100, B00000000, 0x72},   // 0x32, 2   
   {B01111000, B11001100, B00001100, B00111000, B00001100, B11001100, B01111000, B00000000, 0x72},   // 0x33, 3   
   {B00011100, B00111100, B01101100, B11001100, B11111110, B00001100, B00011110, B00000000, 0x71},   // 0x34, 4   
   {B11111100, B11000000, B11111000, B00001100, B00001100, B11001100, B01111000, B00000000, 0x72},   // 0x35, 5   
   {B00111000, B01100000, B11000000, B11111000, B11001100, B11001100, B01111000, B00000000, 0x72},   // 0x36, 6   
   {B11111100, B11001100, B00001100, B00011000, B00110000, B00110000, B00110000, B00000000, 0x72},   // 0x37, 7   
   {B01111000, B11001100, B11001100, B01111000, B11001100, B11001100, B01111000, B00000000, 0x72},   // 0x38, 8   
   {B01111000, B11001100, B11001100, B01111100, B00001100, B00011000, B01110000, B00000000, 0x72},   // 0x39, 9   
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x32},   // 0x3a, :   
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x00, 0x32},   // 0x3b, ;   
   {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00, 0x41},   // 0x3c, <   
   {0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x40},   // 0x3d, =   
   {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00, 0x30},   // 0x3e, >   
   {0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00, 0x40},   // 0x3f, ?   
   {0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x00, 0x40},   // 0x40, @ 
   {B00110000, B01111000, B11001100, B11001100, B11111100, B11001100, B11001100, B00000000, 0x72},   // 0x41, A  //ultimo byte nos dice donde empieza(1er nibble) y donde termina(2do nibble)
   {B11111100, B01100110, B01100110, B01111100, B01100110, B01100110, B11111100, B00000000, 0x71},   // 0x42, B
   {B00111100, B01100110, B11000000, B11000000, B11000000, B01100110, B00111100, B00000000, 0x71},   // 0x43, C
   {B11111000, B01101100, B01100110, B01100110, B01100110, B01101100, B11111000, B00000000, 0x71},   // 0x44, D
   {B11111110, B01100010, B01101000, B01111000, B01101000, B01100010, B11111110, B00000000, 0x71},   // 0x45, E
   {B11111110, B01100010, B01101000, B01111000, B01101000, B01100000, B11110000, B00000000, 0x71},   // 0x46, F
   {B00111100, B01100110, B11000000, B11000000, B11001110, B01100110, B00111110, B00000000, 0x71},   // 0x47, G
   {B11001100, B11001100, B11001100, B11111100, B11001100, B11001100, B11001100, B00000000, 0x72},   // 0x48, H
   {B01111000, B00110000, B00110000, B00110000, B00110000, B00110000, B01111000, B00000000, 0x63},   // 0x49, I
   {B00011110, B00001100, B00001100, B00001100, B11001100, B11001100, B01111000, B00000000, 0x71},   // 0x4a, J
   {B11100110, B01100110, B01101100, B01111000, B01101100, B01100110, B11100110, B00000000, 0x71},   // 0x4b, K
   {B11110000, B01100000, B01100000, B01100000, B01100010, B01100110, B11111110, B00000000, 0x71},   // 0x4c, L
   {B11000110, B11101110, B11111110, B11111110, B11010110, B11000110, B11000110, B00000000, 0x71},   // 0x4d, M
   {B11000110, B11100110, B11110110, B11011110, B11001110, B11000110, B11000110, B00000000, 0x71},   // 0x4e, N
   {B00111000, B01101100, B11000110, B11000110, B11000110, B01101100, B00111000, B00000000, 0x71},   // 0x4f, O
   {B11111100, B01100110, B01100110, B01111100, B01100000, B01100000, B11110000, B00000000, 0x71},   // 0x50, P
   {B01111000, B11001100, B11001100, B11001100, B11011100, B01111000, B00011100, B00000000, 0x72},   // 0x51, Q
   {B11111100, B01100110, B01100110, B01111100, B01101100, B01100110, B11100110, B00000000, 0x71},   // 0x52, R
   {B01111000, B11001100, B11100000, B01110000, B00011100, B11001100, B01111000, B00000000, 0x72},   // 0x53, S
   {B11111100, B10110100, B00110000, B00110000, B00110000, B00110000, B01111000, B00000000, 0x72},   // 0x54, T
   {B11001100, B11001100, B11001100, B11001100, B11001100, B11001100, B11111100, B00000000, 0x72},   // 0x55, U
   {B11001100, B11001100, B11001100, B11001100, B11001100, B01111000, B00110000, B00000000, 0x72},   // 0x56, V
   {B11000110, B11000110, B11000110, B11010110, B11111110, B11101110, B11000110, B00000000, 0x71},   // 0x57, W
   {B11000110, B11000110, B01101100, B00111000, B00111000, B01101100, B11000110, B00000000, 0x71},   // 0x58, X
   {B11001100, B11001100, B11001100, B01111000, B00110000, B00110000, B01111000, B00000000, 0x72},   // 0x59, Y
   {B11111110, B11000110, B10001100, B00011000, B00110010, B01100110, B11111110, B00000000, 0x71},   // 0x5a, Z
   {0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x00, 0x31},   // 0x5b, [   31
   {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x00, 0x40},   // 0x5c, '\'   40
   {0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00,0x31},   // 0x5d, ]   31
   {0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x5e, ^   40
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x40},   // 0x5f, _   40
   {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21},   // 0x60, `   21
   {B00000000, B00000000, B01111000, B00001100, B01111100, B11001100, B01110110, B00000000, 0x71},   // 0x61, a
   {B11100000, B01100000, B01100000, B01111100, B01100110, B01100110, B11011100, B00000000, 0x71},   // 0x62, b
   {B00000000, B00000000, B01111000, B11001100, B11000000, B11001100, B01111000, B00000000, 0x72},   // 0x63, c
   {B00011100, B00001100, B00001100, B01111100, B11001100, B11001100, B01110110, B00000000, 0x71},   // 0x64, d
   {B00000000, B00000000, B01111000, B11001100, B11111100, B11000000, B01111000, B00000000, 0x72},   // 0x65, e
   {B00111000, B01101100, B01100000, B11110000, B01100000, B01100000, B11110000, B00000000, 0x72},   // 0x66, f
   {B00000000, B00000000, B01110110, B11001100, B11001100, B01111100, B00001100, B11111000, 0x71},   // 0x67, g
   {B11100000, B01100000, B01101100, B01110110, B01100110, B01100110, B11100110, B00000000, 0x71},   // 0x68, h
   {B00110000, B00000000, B01110000, B00110000, B00110000, B00110000, B01111000, B00000000, 0x63},   // 0x69, i
   {B00001100, B00000000, B00001100, B00001100, B00001100, B11001100, B11001100, B01111000, 0x72},   // 0x6a, j
   {B11100000, B01100000, B01100110, B01101100, B01111000, B01101100, B11100110, B00000000, 0x71},   // 0x6b, k
   {B01110000, B00110000, B00110000, B00110000, B00110000, B00110000, B01111000, B00000000, 0x63},   // 0x6c, l
   {B00000000, B00000000, B11001100, B11111110, B11111110, B11010110, B11000110, B00000000, 0x71},   // 0x6d, m
   {B00000000, B00000000, B11111000, B11001100, B11001100, B11001100, B11001100, B00000000, 0x72},   // 0x6e, n
   {B00000000, B00000000, B01111000, B11001100, B11001100, B11001100, B01111000, B00000000, 0x72},   // 0x6f, o
   {B00000000, B00000000, B11011100, B01100110, B01100110, B01111100, B01100000, B11110000, 0x71},   // 0x70, p
   {B00000000, B00000000, B01110110, B11001100, B11001100, B01111100, B00001100, B00011110, 0x71},   // 0x71, q  
   {B00000000, B00000000, B11011100, B01110110, B01100110, B01100000, B11110000, B00000000, 0x71},   // 0x72, r
   {B00000000, B00000000, B01111100, B11000000, B01111000, B00001100, B11111000, B00000000, 0x72},   // 0x73, s
   {B00010000, B00110000, B01111100, B00110000, B00110000, B00110100, B00011000, B00000000, 0x62},   // 0x74, t
   {B00000000, B00000000, B11001100, B11001100, B11001100, B11001100, B01110110, B00000000, 0x71},   // 0x75, u
   {B00000000, B00000000, B11001100, B11001100, B11001100, B01111000, B00110000, B00000000, 0x72},   // 0x76, v  
   {B00000000, B00000000, B11000110, B11010110, B11111110, B11111110, B01101100, B00000000, 0x71},   // 0x77, w
   {B00000000, B00000000, B11000110, B01101100, B00111000, B01101100, B11000110, B00000000, 0x71},   // 0x78, x
   {B00000000, B00000000, B11001100, B11001100, B11001100, B01111100, B00001100, B11111000, 0x72},   // 0x79, y
   {B00000000, B00000000, B11111100, B10011000, B00110000, B01100100, B11111100, B00000000, 0x72},   // 0x7a, z
   {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x00, 0x41},   // 0x7b, {   41
   {0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x33},   // 0x7c, |   33 //modificado
   {0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x00, 0x30},   // 0x7d, }   30
   {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x7e, ~
   {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00, 0x40},    // 0x7f, DEL
   {B01111000, B00000000, B11111000, B11001100, B11001100, B11001100, B11001100, B00000000, 0x72},   // 'ñ'  //incorporadas aqui en v1.6
   {B00001100, B00011000, B01111000, B00001100, B01111100, B11001100, B01110110, B00000000, 0x71},   // 'á'
   {B00001100, B00011000, B01111000, B11001100, B11111100, B11000000, B01111000, B00000000, 0x72},   // 'é'
   {B00011000, B00110000, B01110000, B00110000, B00110000, B00110000, B01111000, B00000000, 0x63},   // 'í'
   {B00001100, B00011000, B01111000, B11001100, B11001100, B11001100, B01111000, B00000000, 0x72},   // 'ó'
   {B00011000, B00110000, B11001100, B11001100, B11001100, B11001100, B01110110, B00000000, 0x71},   // 'ú'
   {B11001100, B00000000, B11001100, B11001100, B11001100, B11001100, B01110110, B00000000, 0x71}   //'ü'
};

//----------------------------------------------------------------------------------------------------------------------------------------
/*
//Alfabeto estandar 7x5 para scan a traves de las colummnas (refresh)
const byte abecedario[] PROGMEM = {    //Abecedario estandar para estas condicciones: MSB arriba, ON con '1' //    
B00000000, B00000000, B00000000, B00000000, B00000000, //space 20
B00000000, B00000000, B01111101, B00000000, B00000000, //! 21
B00000000, B01110000, B00000000, B01110000, B00000000, //" 22
B00010100, B00111110, B00010100, B00111110, B00010100, //# 23       
B00010010, B00101010, B01101011, B00101010, B00100100, //$ 24
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO      
B00011100, B00100010, B01000001, B00000000, B00000000, //( 28
B00000000, B00000000, B01000001, B00100010, B00011100, //) 29
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B00001000, B00001000, B00111110, B00001000, B00001000, //+ 2B
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B00001000, B00001000, B00001000, B00001000, B00001000, //- 2D
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B00000010, B00000100, B00001000, B00010000, B00100000, /// 2F    
B00111110, B01000101, B01001001, B01010001, B00111110, //0 30 
B00010001, B00100001, B01111111, B00000001, B00000001, //1 31
B00100001, B01000011, B01000101, B01001001, B00110001, //2 32
B00100010, B01000001, B01000001, B01001001, B00110110, //3 33 
B00000100, B00001100, B00010100, B00100100, B01111111, //4 34
B01111001, B01001001, B01001001, B01001001, B01000110, //5 35
B00111110, B01001001, B01001001, B01001001, B00100110, //6 36
B01000001, B01000010, B01000100, B01001000, B01110000, //7 37
B00110110, B01001001, B01001001, B01001001, B00110110, //8 38
B00110010, B01001001, B01001001, B01001001, B00111110, //9 39
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B00111111, B01001000, B01001000, B01001000, B00111111, //A 41
B01111111, B01001001, B01001001, B01001001, B00110110, //B 42
B00111110, B01000001, B01000001, B01000001, B00100010, //C 43
B01111111, B01000001, B01000001, B01000001, B00111110, //D 44
B01111111, B01001001, B01001001, B01001001, B01001001, //E 45
B01111111, B01001000, B01001000, B01001000, B01001000, //F 46
B00111110, B01000001, B01001101, B01001001, B00101110, //G 47
B01111111, B00001000, B00001000, B00001000, B01111111, //H 48
B01000001, B01000001, B01111111, B01000001, B01000001, //I 49
B00000010, B00000001, B00000001, B00000001, B01111110, //J 4A
B01111111, B00001000, B00010100, B00100010, B01000001, //K 4B
B01111111, B00000001, B00000001, B00000001, B00000001, //L 4C
B01111111, B00100000, B00010000, B00100000, B01111111, //M 4D
B01111111, B00010000, B00001000, B00000100, B01111111, //N 4E
B00111110, B01000001, B01000001, B01000001, B00111110, //O 4F
B01111111, B01001000, B01001000, B01001000, B00110000, //P 50  
B00111110, B01000001, B01000101, B00111110, B00000001, //Q 51 
B01111111, B01001000, B01001100, B01001010, B00110001, //R 52
B00110010, B01001001, B01001001, B01001001, B00100110, //S 53
B01000000, B01000000, B01111111, B01000000, B01000000, //T 54
B01111110, B00000001, B00000001, B00000001, B01111110, //U 55 
B01111100, B00000110, B00000011, B00000110, B01111100, //V 56
B01111111, B00000010, B00000100, B00000010, B01111111, //W 57
B01100011, B00010100, B00001000, B00010100, B01100011, //X 58
B01000000, B00100000, B00011111, B00100000, B01000000, //Y 59
B01000011, B01000101, B01001001, B01010001, B01100001, //Z 5A
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO
B01111110, B01111110, B01111110, B01111110, B01111110, //NO DEFINIDO 60
B00010010, B00010101, B00010101, B00001111, B00000001, //a 61
B00011111, B00000101, B00000101, B00000101, B00000010, //b 62
B00001110, B00010001, B00010001, B00010001, B00010001, //c 63
B00000010, B00000101, B00000101, B00000101, B00011111, //d 64
B00001110, B00010011, B00010101, B00001001, B00000010, //e 65
B00000101, B00011111, B00100101, B00100000, B00010000, //f 66 
B00001000, B00010101, B00010101, B00011001, B00001110, //g 67
B00011111, B00000100, B00000100, B00000100, B00000011, //h 68 
B00010001, B00010001, B01011111, B00000001, B00000001, //i 69 
B00000010, B00000001, B00010001, B00010001, B01011110, //j 6a 
B00011111, B00000100, B00001100, B00010010, B00000001, //k 6b
B00011111, B00000001, B00000001, B00000001, B00000001, //l 6c 
B00011111, B00001000, B00000100, B00001000, B00011111, //m 6d
B00011111, B00001000, B00000100, B00000010, B00011111, //n 6e
B00001110, B00010001, B00010001, B00010001, B00001110, //o 6f
B00011111, B00010100, B00010100, B00010100, B00001000, //p 70 
B00001000, B00010100, B00010100, B00010100, B00011111, //q 71
B00011111, B00000100, B00001000, B00010000, B00010000, //r 72
B00001001, B00010101, B00010101, B00010101, B00010010, //s 73
B00010000, B00010000, B00011111, B00010000, B00010000, //t 74 
B00011110, B00000001, B00000001, B00000001, B00011110, //u 75
B00011100, B00000010, B00000001, B00000010, B00011100, //v 76
B00011110, B00000001, B00000010, B00000001, B00011110, //w 77
B00010001, B00001010, B00000100, B00001010, B00010001, //x 78
B00010001, B00001010, B00000100, B00001000, B00010000, //y 79
B00010001, B00010011, B00010101, B00011001, B00010001}; //z 7a
*/
/*
 //----------
 //Convirtiendo codigos en forma de scan columns a scan rows
 delay(500);
 Serial.println();
 int index_byte = 0;
 byte mtx_org = 0, result = 0, tmp = 0;
 byte mask = B01000000;
 for(int i = 0; i < 91; i++)
 {
  Serial.print("{");
  for(int row = 0; row < 7; row ++)
  {
   //tmp = index_byte;
   Serial.print("B000");
   for(int j = 0; j < 5; j++) //columnas
   {
     //char c = i + 0x20;
     //mtx_org = pgm_read_byte(&(abecedario[tmp]));
     mtx_org = pgm_read_byte(&(abecedario[i * 5 + j]));

     if(mtx_org & mask)
      Serial.print("1");
     else
      Serial.print("0");
     //tmp++;
   }
   //Serial.print(result. HEX);
   if(row != 6)
    Serial.print(", ");
   else
    //Serial.print(", 0x40}, ");
    Serial.print("}, ");
   mask = mask >> 1;
   //result = 0;
  }//rows
  //index_byte += 5;
  mask = B01000000;
  char c = i + 0x20;
  Serial.print(" // ");
  Serial.println(c);
 }//for a traves de los caracteres
 //FIN: Convirtiendo codigos...
 //-----------
*/
//---------------------------------------------------------------------------------------------------------------------------
//Este es el sencillo original de 7x5
//Este Alfabeto fue adquirido en columnas y convertido a filas mediante el codigo comentareado arriba
const byte Alphabet3[][9] PROGMEM = {    //Abecedario estandar para estas condicciones: ... top to bottom, ... LSB right 
{0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 0x53},  // espacio //Dejando el espacio con 3 cols
{0, B00000100, B00000100, B00000100, B00000100, B00000100, B00000000, B00000100, 0x22},  // !
{0, B00001010, B00001010, B00001010, B00000000, B00000000, B00000000, B00000000, 0x31},  // "
{0, B00000000, B00001010, B00011111, B00001010, B00011111, B00001010, B00000000, 0x40},  // #
{0, B00000100, B00001111, B00010000, B00001110, B00000001, B00011110, B00000100, 0x40},  // $
{0, 0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x40},   // 0x25, %   40
{0, 0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x40},   // 0x26, &   40
//{0, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x32},   // 0x27, '   32
{0, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x22},   // 0x27, '  //lo mismo q con la comilla doble (ver los otros alfabetos que era lo que pasaba...)
{0, B00000100, B00001000, B00010000, B00010000, B00010000, B00001000, B00000100, 0x42},  // (
{0, B00000100, B00000010, B00000001, B00000001, B00000001, B00000010, B00000100, 0x20},  // )
{0, 0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x40},   // 0x2a, * 
{0, B00000000, B00000100, B00000100, B00011111, B00000100, B00000100, B00000000, 0x40},  // +
{0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x32},   // 0x2c, ,
{0, B00000000, B00000000, B00000000, B00011111, B00000000, B00000000, B00000000, 0x40},  // -
{0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x32},   // 0x2e, .
{0, B00000000, B00000001, B00000010, B00000100, B00001000, B00010000, B00000000, 0x40},  // /
{0, B00001110, B00010001, B00010011, B00010101, B00011001, B00010001, B00001110, 0x40},  // 0
{0, B00000100, B00001100, B00010100, B00000100, B00000100, B00000100, B00011111, 0x40},  // 1
{0, B00001110, B00010001, B00000001, B00000010, B00000100, B00001000, B00011111, 0x40},  // 2
{0, B00001110, B00010001, B00000001, B00000010, B00000001, B00010001, B00001110, 0x40},  // 3
{0, B00000001, B00000011, B00000101, B00001001, B00011111, B00000001, B00000001, 0x40},  // 4
{0, B00011111, B00010000, B00010000, B00011110, B00000001, B00000001, B00011110, 0x40},  // 5
{0, B00001110, B00010001, B00010000, B00011110, B00010001, B00010001, B00001110, 0x40},  // 6
{0, B00011111, B00000001, B00000001, B00000010, B00000100, B00001000, B00010000, 0x40},  // 7
{0, B00001110, B00010001, B00010001, B00001110, B00010001, B00010001, B00001110, 0x40},  // 8
{0, B00001110, B00010001, B00010001, B00001111, B00000001, B00010001, B00001110, 0x40},  // 9
{0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x32},   // 0x3a, :   
{0, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x32},   // 0x3b, ;   
{0, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x41},   // 0x3c, <   
{0, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x40},   // 0x3d, =   
{0, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x30},   // 0x3e, >   
{0, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x40},   // 0x3f, ?   
{0, 0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x40},   // 0x40, @  
{0, B00001110, B00010001, B00010001, B00011111, B00010001, B00010001, B00010001, 0x40},  // A
{0, B00011110, B00010001, B00010001, B00011110, B00010001, B00010001, B00011110, 0x40},  // B
{0, B00001110, B00010001, B00010000, B00010000, B00010000, B00010001, B00001110, 0x40},  // C
{0, B00011110, B00010001, B00010001, B00010001, B00010001, B00010001, B00011110, 0x40},  // D
{0, B00011111, B00010000, B00010000, B00011111, B00010000, B00010000, B00011111, 0x40},  // E
{0, B00011111, B00010000, B00010000, B00011111, B00010000, B00010000, B00010000, 0x40},  // F
{0, B00001110, B00010001, B00010000, B00010111, B00010101, B00010001, B00001110, 0x40},  // G
{0, B00010001, B00010001, B00010001, B00011111, B00010001, B00010001, B00010001, 0x40},  // H
{0, B00011111, B00000100, B00000100, B00000100, B00000100, B00000100, B00011111, 0x40},  // I
{0, B00000001, B00000001, B00000001, B00000001, B00000001, B00010001, B00001110, 0x40},  // J
{0, B00010001, B00010010, B00010100, B00011000, B00010100, B00010010, B00010001, 0x40},  // K
{0, B00010000, B00010000, B00010000, B00010000, B00010000, B00010000, B00011111, 0x40},  // L
{0, B00010001, B00011011, B00010101, B00010001, B00010001, B00010001, B00010001, 0x40},  // M
{0, B00010001, B00010001, B00011001, B00010101, B00010011, B00010001, B00010001, 0x40},  // N
{0, B00001110, B00010001, B00010001, B00010001, B00010001, B00010001, B00001110, 0x40},  // O
{0, B00011110, B00010001, B00010001, B00011110, B00010000, B00010000, B00010000, 0x40},  // P
{0, B00001100, B00010010, B00010010, B00010010, B00010110, B00010010, B00001101, 0x40},  // Q
{0, B00011110, B00010001, B00010001, B00011110, B00010100, B00010010, B00010001, 0x40},  // R
{0, B00001110, B00010001, B00010000, B00001110, B00000001, B00010001, B00001110, 0x40},  // S
{0, B00011111, B00000100, B00000100, B00000100, B00000100, B00000100, B00000100, 0x40},  // T
{0, B00010001, B00010001, B00010001, B00010001, B00010001, B00010001, B00001110, 0x40},  // U
{0, B00010001, B00010001, B00010001, B00010001, B00011011, B00001110, B00000100, 0x40},  // V
{0, B00010001, B00010001, B00010001, B00010001, B00010101, B00011011, B00010001, 0x40},  // W
{0, B00010001, B00010001, B00001010, B00000100, B00001010, B00010001, B00010001, 0x40},  // X
{0, B00010001, B00001010, B00000100, B00000100, B00000100, B00000100, B00000100, 0x40},  // Y
{0, B00011111, B00000001, B00000010, B00000100, B00001000, B00010000, B00011111, 0x40},  // Z
{0, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x31},   // 0x5b, [   
{0, 0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x40},   // 0x5c, '\'   
{0, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x31},    // 0x5d, ]   
{0, 0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x5e, ^   
{0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x40},   // 0x5f, _   
{0, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x21},   // 0x60, `   
{0, B00000000, B00000000, B00011100, B00000010, B00001110, B00010010, B00001111, 0x40},  // a
{0, B00000000, B00000000, B00010000, B00010000, B00011110, B00010001, B00011110, 0x40},  // b
{0, B00000000, B00000000, B00001111, B00010000, B00010000, B00010000, B00001111, 0x40},  // c
{0, B00000000, B00000000, B00000001, B00000001, B00001111, B00010001, B00001111, 0x40},  // d
{0, B00000000, B00000000, B00001100, B00010010, B00010100, B00011001, B00001110, 0x40},  // e
{0, B00000000, B00000110, B00001001, B00001000, B00011100, B00001000, B00011100, 0x40},  // f
{0, B00000000, B00000000, B00001110, B00010011, B00001101, B00000001, B00001110, 0x40},  // g
{0, B00000000, B00000000, B00010000, B00010000, B00011110, B00010001, B00010001, 0x40},  // h
{0, B00000100, B00000000, B00011100, B00000100, B00000100, B00000100, B00011111, 0x40},  // i
{0, B00000001, B00000000, B00000111, B00000001, B00000001, B00010001, B00001110, 0x40},  // j
{0, B00000000, B00000000, B00010010, B00010100, B00011100, B00010010, B00010001, 0x40},  // k
{0, B00000000, B00000000, B00010000, B00010000, B00010000, B00010000, B00011111, 0x40},  // l
{0, B00000000, B00000000, B00010001, B00011011, B00010101, B00010001, B00010001, 0x40},  // m
{0, B00000000, B00000000, B00010001, B00011001, B00010101, B00010011, B00010001, 0x40},  // n
{0, B00000000, B00000000, B00001110, B00010001, B00010001, B00010001, B00001110, 0x40},  // o
{0, B00000000, B00000000, B00011110, B00010001, B00011110, B00010000, B00010000, 0x40},  // p
{0, B00000000, B00000000, B00001111, B00010001, B00001111, B00000001, B00000001, 0x40},  // q
{0, B00000000, B00000000, B00010011, B00010100, B00011000, B00010000, B00010000, 0x40},  // r
{0, B00000000, B00000000, B00001111, B00010000, B00001110, B00000001, B00011110, 0x40},  // s
{0, B00000000, B00000000, B00011111, B00000100, B00000100, B00000100, B00000100, 0x40},  // t
{0, B00000000, B00000000, B00010001, B00010001, B00010001, B00010001, B00001110, 0x40},  // u
{0, B00000000, B00000000, B00010001, B00010001, B00010001, B00001010, B00000100, 0x40},  // v
{0, B00000000, B00000000, B00010001, B00010001, B00010001, B00010101, B00001010, 0x40},  // w
{0, B00000000, B00000000, B00010001, B00001010, B00000100, B00001010, B00010001, 0x40},  // x
{0, B00000000, B00000000, B00010001, B00001010, B00000100, B00001000, B00010000, 0x40},  // y
{0, B00000000, B00000000, B00011111, B00000010, B00000100, B00001000, B00011111, 0x40},  // z
{0, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x41},   // 0x7b, {   41
{0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x33},   // 0x7c, |   33 //modificado
{0, 0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x30},   // 0x7d, }   30
{0, 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40},   // 0x7e, ~
{0, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x40},    // 0x7f, DEL
{0x00, B00001110, B00000000, B00010001, B00011001, B00010101, B00010011, B00010001, 0x40},   // 'ñ   //incorporadas aqui en v1.6
{B00000010, B00000100, 0x00, B00011100, B00000010, B00001110, B00010010, B00001111, 0x40},   // 'á'
{B00000010, B00000100, 0x00, B00001100, B00010010, B00010100, B00011001, B00001110, 0x40},   // 'é'
{B00000010, B00000100, 0x00, B00011100, B00000100, B00000100, B00000100, B00011111, 0x40},   // 'í'
{B00000010, B00000100, 0x00, B00001110, B00010001, B00010001, B00010001, B00001110, 0x40},   // 'ó'
{B00000010, B00000100, 0x00, B00010001, B00010001, B00010001, B00010001, B00001110, 0x40},   // 'ú'
{0, B00010001, B00000000, B00010001, B00010001, B00010001, B00010001, B00001110, 0x40}   // 'ü'
};
//-----------------------------------------------------------------------------------------------------------------------------------------------
 /*
  //v1.6:
  byte A[10][10];
  
 byte [][] fonts;
 */
//void **Fonts[] = {Alphabet0, Alphabet1, Alphabet2, Alphabet3};
